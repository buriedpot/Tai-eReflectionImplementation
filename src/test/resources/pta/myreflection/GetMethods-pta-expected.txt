Points-to sets of all variables
[]:<GetMethods: java.lang.Class class$(java.lang.String)>/name -> [[]:ConstantObj{java.lang.String: "J"}]
[]:<GetMethods: java.lang.Class class$(java.lang.String)>/temp$0 -> [[]:ConstantObj{java.lang.Class: J.class}]
[]:<GetMethods: java.lang.Class class$(java.lang.String)>/temp$1 -> [[]:MergedObj{<Merged java.lang.NoClassDefFoundError>}]
[]:<GetMethods: void invokeOneArg(java.lang.String)>/%stringconst0 -> [[]:ConstantObj{java.lang.String: "J"}]
[]:<GetMethods: void invokeOneArg(java.lang.String)>/j -> [[]:NewObj{<GetMethods: void invokeOneArg(java.lang.String)>[24@L14] new J}]
[]:<GetMethods: void invokeOneArg(java.lang.String)>/m -> [[]:ReflectionMetaObj{alloc=pascal.taie.analysis.pta.plugin.mock.UJMethod@1b6027c5,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=pascal.taie.analysis.pta.plugin.mock.UJMethod@4b0ffb52,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=pascal.taie.analysis.pta.plugin.mock.UJMethod@584e8bcc,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=pascal.taie.analysis.pta.plugin.mock.UJMethod@9182ee1,type=java.lang.reflect.Method}]
[]:<GetMethods: void invokeOneArg(java.lang.String)>/methods -> [[]:ReflectionMetaObj{alloc=methodsobj,type=java.lang.reflect.Method[]}]
[]:<GetMethods: void invokeOneArg(java.lang.String)>/name -> [[]:ConstantObj{java.lang.String: "bar"}, []:ConstantObj{java.lang.String: "foo"}]
[]:<GetMethods: void invokeOneArg(java.lang.String)>/temp$0 -> [[]:ConstantObj{java.lang.Class: J.class}]
[]:<GetMethods: void invokeOneArg(java.lang.String)>/temp$1 -> [[]:ConstantObj{java.lang.Class: J.class}]
[]:<GetMethods: void invokeOneArg(java.lang.String)>/temp$10 -> [[]:ArrayLengthObj{alloc=1,type=java.lang.Object[]}, []:NewObj{<GetMethods: void invokeOneArg(java.lang.String)>[28@L15] newarray java.lang.Object[%intconst2]}]
[]:<GetMethods: void invokeOneArg(java.lang.String)>/temp$2 -> [[]:ConstantObj{java.lang.Class: J.class}]
[]:<GetMethods: void invokeOneArg(java.lang.String)>/temp$3 -> [[]:ReflectionMetaObj{alloc=methodsobj,type=java.lang.reflect.Method[]}]
[]:<GetMethods: void invokeOneArg(java.lang.String)>/temp$6 -> [[]:ReflectionMetaObj{alloc=pascal.taie.analysis.pta.plugin.mock.UJMethod@1b6027c5,type=java.lang.reflect.Method}]
[]:<GetMethods: void invokeOneArg(java.lang.String)>/temp$9 -> [[]:NewObj{<GetMethods: void invokeOneArg(java.lang.String)>[24@L14] new J}]
[]:<GetMethods: void main(java.lang.String[])>/%stringconst0 -> [[]:ConstantObj{java.lang.String: "foo"}]
[]:<GetMethods: void main(java.lang.String[])>/%stringconst1 -> [[]:ConstantObj{java.lang.String: "bar"}]
[]:<GetMethods: void main(java.lang.String[])>/args -> [[]:EntryPointObj{alloc=<main-arguments>,type=java.lang.String[] in <GetMethods: void main(java.lang.String[])>}]
[]:<I: void <init>()>/%this -> [[]:NewObj{<GetMethods: void invokeOneArg(java.lang.String)>[24@L14] new J}]
[]:<J: void <init>()>/%this -> [[]:NewObj{<GetMethods: void invokeOneArg(java.lang.String)>[24@L14] new J}]

Points-to sets of all static fields
<GetMethods: java.lang.Class class$J> -> [[]:ConstantObj{java.lang.Class: J.class}]

Points-to sets of all instance fields

Points-to sets of all array indexes
[]:ArrayLengthObj{alloc=1,type=java.lang.Object[]}[*] -> [[]:NewObj{<GetMethods: void invokeOneArg(java.lang.String)>[24@L14] new J}]
[]:EntryPointObj{alloc=<main-arguments>,type=java.lang.String[] in <GetMethods: void main(java.lang.String[])>}[*] -> [[]:EntryPointObj{alloc=<main-arguments-element>,type=java.lang.String in <GetMethods: void main(java.lang.String[])>}]
[]:NewObj{<GetMethods: void invokeOneArg(java.lang.String)>[28@L15] newarray java.lang.Object[%intconst2]}[*] -> [[]:NewObj{<GetMethods: void invokeOneArg(java.lang.String)>[24@L14] new J}]
[]:ReflectionMetaObj{alloc=methodsobj,type=java.lang.reflect.Method[]}[*] -> [[]:ReflectionMetaObj{alloc=pascal.taie.analysis.pta.plugin.mock.UJMethod@1b6027c5,type=java.lang.reflect.Method}]

